name: Backend test 
on: [push]
# on:
#   pull_request:
#     branches:
#       - master
#   push:
#     branches:
#       - master

env:
  POSTGRES_USER: "postgres"
  POSTGRES_PASSWORD: "postgres"
  POSTGRES_DB: "test_db"
  POSTGRES_HOST: "localhost"
  POSTGRES_PORT: "5432"
  SECRET_KEY: "testKey"
  ALGORITHM: "HS256"
  ACCESS_TOKEN_EXPIRE_MINUTES: "30"
  FRONTEND_HOST: "frontend"
  FRONTEND_PORT: "3000"
  BACKEND_PORT: "8000"
  AZURE_RG_NAME: resource-group-ls-p-mexc-1
  AZURE_LOCATION: mexicocentral
  DOCKER_IMAGE_NAME: jonathanhn/leageshop-backend
  DOCKER_REGISTRY_SERVER: docker.io
  DOCKER_REGISTRY_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_REGISTRY_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  TERRAFORM_VERSION: 1.11.4

jobs:
  push-test-format:
    runs-on: ubuntu-latest
    environment: production
    env:
      #This is not possible for now, have to define two times the variables
      # DATABASE_URL: "postgresql+asyncpg://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}"
      # DATABASE_ALEMBIC_URL: "postgresql+asyncpg://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@${{ env.POSTGRES_HOST }}:${{ env.POSTGRES_PORT }}/${{ env.POSTGRES_DB }}"
      DATABASE_URL: "postgresql+asyncpg://postgres:postgres@localhost:5432/test_db"
      DATABASE_ALEMBIC_URL: "postgresql+asyncpg://postgres:postgres@localhost:5432/test_db"
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - "5432:5432"
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12.2'
          architecture: 'x64'
          
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          #Where pip cache
          path: ~/.cache/pip
          #Cache for different OS also if the .lock changes the hash does and wont use same cache
          key: ${{ runner.os }}-pip-${{ hashFiles('back/requirements.lock') }}
          #Default if no cache
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: back
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.lock

      - name: Run unit test 
        working-directory: back 
        run: TESTING=true python -m pytest -v -o asyncio_default_fixture_loop_scope=function test/unit

      - name: Run integration 
        working-directory: back 
        run: TESTING=true python -m pytest -v -o asyncio_default_fixture_loop_scope=function test/integration

      - name: Aply database schema
        working-directory: back
        run: |
          alembic upgrade head

      - name: Start backend server
        working-directory: back
        run: |
          uvicorn app.main:app --host 0.0.0.0 --port $BACKEND_PORT &
          sleep 10 

      - name: Stop backend server
        run: pkill uvicorn

      - name: Set Docker Image Tag
        run: echo "DOCKER_IMAGE_TAG=${GITHUB_SHA}" >> $GITHUB_ENV

      - name: Build Docker Image
        run: docker build back -t ${DOCKER_IMAGE_NAME}:${{ env.DOCKER_IMAGE_TAG }}

      - name: Log in to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY_SERVER }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker Image
        run: docker push ${DOCKER_IMAGE_NAME}:${{ env.DOCKER_IMAGE_TAG }}

      # --- Azure Deployment with Terraform ---
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: |
            {
              "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
              "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
            }

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan \
          -var "docker_image_tag=${{ env.DOCKER_IMAGE_TAG }}" \
          -var "db_admin_password=${{ secrets.DB_ADMIN_PASSWORD }}"

      - name: Terraform Apply
        run: terraform apply -auto-approve \
          -var "docker_image_tag=${{ env.DOCKER_IMAGE_TAG }}" \
          -var "db_admin_password=${{ secrets.DB_ADMIN_PASSWORD }}"
